// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelAroundAPI.Data;

#nullable disable

namespace TravelAroundAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250301014727_DaysToDB")]
    partial class DaysToDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TravelAroundAPI.Entities.Atraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Atractions");
                });

            modelBuilder.Entity("TravelAroundAPI.Entities.FavouriteTravel", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TravelId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TravelId");

                    b.HasIndex("TravelId");

                    b.ToTable("FavouriteTravels");
                });

            modelBuilder.Entity("TravelAroundAPI.Entities.TravelAtraction", b =>
                {
                    b.Property<int>("TravelId")
                        .HasColumnType("int");

                    b.Property<int>("AtractionId")
                        .HasColumnType("int");

                    b.HasKey("TravelId", "AtractionId");

                    b.HasIndex("AtractionId");

                    b.ToTable("TravelAtractions");
                });

            modelBuilder.Entity("TravelAroundAPI.Entities.TravelModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<double>("Members")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int?>("madeByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("madeByUserId");

                    b.ToTable("Travels");
                });

            modelBuilder.Entity("TravelAroundAPI.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TravelAroundAPI.Entities.FavouriteTravel", b =>
                {
                    b.HasOne("TravelAroundAPI.Entities.TravelModel", "Travel")
                        .WithMany("FavouritedByUsers")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelAroundAPI.Entities.User", "User")
                        .WithMany("FavouriteTravels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Travel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelAroundAPI.Entities.TravelAtraction", b =>
                {
                    b.HasOne("TravelAroundAPI.Entities.Atraction", "Atraction")
                        .WithMany("TravelAtractions")
                        .HasForeignKey("AtractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelAroundAPI.Entities.TravelModel", "Travel")
                        .WithMany("TravelAtractions")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atraction");

                    b.Navigation("Travel");
                });

            modelBuilder.Entity("TravelAroundAPI.Entities.TravelModel", b =>
                {
                    b.HasOne("TravelAroundAPI.Entities.User", null)
                        .WithMany("MadeTravels")
                        .HasForeignKey("madeByUserId");
                });

            modelBuilder.Entity("TravelAroundAPI.Entities.Atraction", b =>
                {
                    b.Navigation("TravelAtractions");
                });

            modelBuilder.Entity("TravelAroundAPI.Entities.TravelModel", b =>
                {
                    b.Navigation("FavouritedByUsers");

                    b.Navigation("TravelAtractions");
                });

            modelBuilder.Entity("TravelAroundAPI.Entities.User", b =>
                {
                    b.Navigation("FavouriteTravels");

                    b.Navigation("MadeTravels");
                });
#pragma warning restore 612, 618
        }
    }
}
